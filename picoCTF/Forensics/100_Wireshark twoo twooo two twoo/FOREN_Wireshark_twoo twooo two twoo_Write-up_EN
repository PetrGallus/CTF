----------------------------------------------------------
Description
Can you find the flag? 
shark2.pcapng.
----------------------------------------------------------

1. Download given input file

2. Open it in Wireshark to inspect network traffic log
    - we can see nearly 5000 packets overall
        - 28 seconds
        - protocols: ARP, DNS, HTTP, TCP, TLS 1.2, TLS 1.3
        - conversations
            - menu -> Statistics -> Conversations
            - ETH: 4
            - IPv4: 6
            - TCP: 115
            - UDP: 757
            - IPv4 ... data sent from 103 to 104 (4th line) are largest 
                - 2885 kB of data transmitted, most of the from B to A
                    - from 192.168.38.104 to 192.168.38.103
                        - lets look at these
                        
3. Filter IP addresses with biggest data transmitted
    - ip.src==192.168.38.104 && ip.dst==192.168.38.103
        - right click -> Apply as filter -> Selected -> A->B
    - no GET in Info, mostly POST
    
4. Filter the first one in order
    - 8.8.8.8 && 192.168.38.104
        - right click -> Apply as filter -> Selected -> A <-> B
            - ip.addr==8.8.8.8 && ip.addr==192.168.38.104
                - only DNS protocols, 8.8.8.8 seems to be default gateway
                                
5. Filter the second one in order
    - 18.217.1.57 && 192.168.38.104
        - right click -> Apply as filter -> Selected -> A <-> B
            - ip.addr==18.217.1.57 && ip.addr==192.168.38.104
                - there are also some HTTP containing GET /flag
                    - last one (No. 4636)
                        - right click -> Follow -> HTTP Stream
                            - picoCTF{3fe0b2788f30d9cb9f77d3b2752f13c554fe7f0e7a2883e57c8a44b34f35675c}      
                                - looks like hex value, lets convert it into ascii
                                    - https://www.rapidtables.com/convert/number/hex-to-ascii.html 
                                        - ?à²x0ÙËwÓ²u/ÅTþz(å|D³O5g\
                                            - nothing useful
                                            
6. 5. Filter the third one in order
    - 169.254.169.254 && 192.168.38.104
        - right click -> Apply as filter -> Selected -> A <-> B
            - ip.addr==169.254.169.254 && ip.addr==192.168.38.104
                - there is some HTTP/1.0 200 OK (text/plain)
                    - No. 4336
                        - right click -> Follow -> HTTP Stream
                            - AQAAANdL16XINqtaIfPEd4oSsoqp95pLlVW4Iavm0x93mlJlUw-LqQ==     
                                - looks like base64 value, lets convert it into ascii
                                    - https://gchq.github.io/CyberChef/#recipe=From_Base64('A-Za-z0-9%2B/%3D',true,false)&input=QVFBQUFOZEwxNlhJTnF0YUlmUEVkNG9Tc29xcDk1cExsVlc0SWF2bTB4OTNtbEpsVXctTHFRPT0 
                                        - ....×K×¥È6«Z!óÄw..².©÷.K.U¸!«æÓ.w.ReS.êD
                                            - nothing useful                                            


7. Using the tshark tool in terminal
    - it is a network protocol analyzer like wireshark
    - filter DNS traffis
        - tshark -nr shark2.pcapng -Y 'dns' 
            - there is a traffic going from 8.8.8.8 and 192.168.38.104
                - we wanna focus on real machine, not default gateway, lets filter 8.8.8.8 out if this
        - tshark -nr shark2.pcapng -Y 'dns' | grep -v '8.8.8.8'
            - lets get out of responses, we want only queries
        - tshark -nr shark2.pcapng -Y 'dns' | grep -v '8.8.8.8' | grep -v response
            - all this traffic goes from 192.168.38.104 to 18.217.1.57 as DNS query
            - it goes through a lot of domains, lets filter only local ones
                - we want local, so grep without -v flag
        - tshark -nr shark2.pcapng -Y 'dns' | grep -v '8.8.8.8' | grep -v response | grep local
            - there are only 7 packets according to our filter
            - fQ== looks like some kind of Base64
                - lets get just those names
                    - with 'awk' we can ask to print just 12th thing on a line (12th column)
        - tshark -nr shark2.pcapng -Y 'dns' | grep -v '8.8.8.8' | grep -v response | grep local | awk -e'{print $12}'
            - cGljb0NU.reddshrimpandherring.com.windomain.local
            - RntkbnNf.reddshrimpandherring.com.windomain.local
            - M3hmMWxf.reddshrimpandherring.com.windomain.local
            - ZnR3X2Rl.reddshrimpandherring.com.windomain.local
            - YWRiZWVm.reddshrimpandherring.com.windomain.local
            - fQ==.reddshrimpandherring.com.windomain.local
            - fQ==.reddshrimpandherring.com.windomain.local
         - lets filter only the first parts of lanes (first char until .reddshim....)
         - tshark -nr shark2.pcapng -Y 'dns' | grep -v '8.8.8.8' | grep -v response | grep local | awk -e'{print $12}' | sed -e 's/\..*//'
            - we obtained this:
                - cGljb0NU
                - RntkbnNf
                - M3hmMWxf
                - ZnR3X2Rl
                - YWRiZWVm
                - fQ==
                - fQ==
             - lets Base64 decode this
                - tshark -nr shark2.pcapng -Y 'dns' | grep -v '8.8.8.8' | grep -v response | grep local | awk -e'{print $12}' | sed -e 's/\..*//' | base64 -d
                    - we obtained the flag :-)

