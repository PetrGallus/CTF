----------------------------------------------------------
Popis
Dokážete najít vlajku? 
shark2.pcapng.
----------------------------------------------------------

1. Stáhněte zadaný vstupní soubor

2. Otevřete jej v programu Wireshark a zkontrolujte protokol síťového provozu
    - vidíme celkem téměř 5000 paketů
        - 28 sekund
        - protokoly: ARP, DNS, HTTP, TCP, TLS 1.2, TLS 1.3.
        - konverzace
            - menu -> Statistiky -> Konverzace
            - ETH: 4
            - IPv4: 6
            - TCP: 115
            - UDP: 757
            - IPv4 ... data odeslaná od 103 do 104 (4. řádek) jsou největší 
                - 2885 kB přenesených dat, většina z nich z B do A
                    - z 192.168.38.104 na 192.168.38.103
                        - Podívejme se na tyto údaje
                        
3. Filtrování IP adres s největším objemem přenesených dat
    - ip.src==192.168.38.104 && ip.dst==192.168.38.103
        - klikněte pravým tlačítkem myši -> Použít jako filtr -> Vybrané -> A->B
    - v informacích není GET, většinou POST
    
4. Filtrujte první v pořadí
    - 8.8.8.8 && 192.168.38.104
        - kliknout pravým tlačítkem myši -> Použít jako filtr -> Vybrané -> A <-> B
            - ip.addr==8.8.8.8 && ip.addr==192.168.38.104
                - pouze protokoly DNS, 8.8.8.8 je zřejmě výchozí brána.
                                
5. Filtrujte druhou v pořadí
    - 18.217.1.57 && 192.168.38.104
        - klikněte pravým tlačítkem myši -> Použít jako filtr -> Vybrané -> A <-> B
            - ip.addr==18.217.1.57 && ip.addr==192.168.38.104
                - jsou zde také některé HTTP obsahující GET /flag
                    - poslední (č. 4636)
                        - klikněte pravým tlačítkem myši -> Sledovat -> HTTP Stream
                            - picoCTF{3fe0b2788f30d9cb9f77d3b2752f13c554fe7f0e7a2883e57c8a44b34f35675c}      
                                - vypadá jako hexadecimální hodnota, převedeme ji do ascii
                                    - https://www.rapidtables.com/convert/number/hex-to-ascii.html 
                                        - ?à²x0ÙËwÓ²u/ÅTþz(å|D³O5g\
                                            - nic užitečného
                                            
6. 5. Filtrujte třetí v pořadí
    - 169.254.169.254 && 192.168.38.104
        - klikněte pravým tlačítkem myši -> Použít jako filtr -> Vybrané -> A <-> B
            - ip.addr==169.254.169.254 && ip.addr==192.168.38.104
                - je zde nějaký HTTP/1.0 200 OK (text/plain)
                    - Ne. 4336
                        - klikněte pravým tlačítkem myši -> Sledovat -> HTTP Stream
                            - AQAAANdL16XINqtaIfPEd4oSsoqp95pLlVW4Iavm0x93mlJlUw-LqQ==     
                                - vypadá jako hodnota base64, převedeme ji do ascii
                                    - https://gchq.github.io/CyberChef/#recipe=From_Base64('A-Za-z0-9%2B/%3D',true,false)&input=QVFBQUFOZEwxNlhJTnF0YUlmUEVkNG9Tc29xcDk1cExsVlc0SWF2bTB4OTNtbEpsVXctTHFRPT0 
                                        - ....×K×¥È6 "Z!óÄw..².©÷.K.U¸!"æÓ.w.ReS.êD
                                                              - nic užitečného                                            


7. Použití nástroje tshark v terminálu
    - je to analyzátor síťových protokolů, podobně jako wireshark
    - filtrovat DNS traffis
        - tshark -nr shark2.pcapng -Y 'dns' 
            - z adres 8.8.8.8 a 192.168.38.104 probíhá provoz.
                - chceme se zaměřit na skutečný stroj, ne na výchozí bránu, odfiltrujeme 8.8.8.8, pokud je to možné.
        - tshark -nr shark2.pcapng -Y 'dns' | grep -v '8.8.8.8'
            - zbavme se odpovědí, chceme pouze dotazy
        - tshark -nr shark2.pcapng -Y 'dns' | grep -v '8.8.8.8' | grep -v response
            - veškerý tento provoz jde z 192.168.38.104 na 18.217.1.57 jako dotaz DNS
            - prochází to spoustou domén, filtrujme pouze ty místní.
                - chceme místní, takže grep bez příznaku -v
        - tshark -nr shark2.pcapng -Y 'dns' | grep -v '8.8.8.8' | grep -v response | grep local
            - podle našeho filtru je zde pouze 7 paketů
            - fQ== vypadá jako nějaký druh Base64
                - získáme pouze tato jména
                    - pomocí 'awk' můžeme požádat o vypsání pouze 12. věci na řádek (12. sloupec)
        - tshark -nr shark2.pcapng -Y 'dns' | grep -v '8.8.8.8' | grep -v response | grep local | awk -e'{print $12}'
            - cGljb0NU.reddshrimpandherring.com.windomain.local
            - RntkbnNf.reddshrimpandherring.com.windomain.local
            - M3hmMWxf.reddshrimpandherring.com.windomain.local
            - ZnR3X2Rl.reddshrimpandherring.com.windomain.local
            - YWRiZWVm.reddshrimpandherring.com.windomain.local
            - fQ==.reddshrimpandherring.com.windomain.local
            - fQ==.reddshrimpandherring.com.windomain.local
         - umožňuje filtrovat pouze první části pruhů (první znak až po .reddshim....).
         - tshark -nr shark2.pcapng -Y 'dns' | grep -v '8.8.8.8' | grep -v response | grep local | awk -e'{print $12}' | sed -e 's/\..*//'
            - jsme získali toto:
                - cGljb0NU
                - RntkbnNf
                - M3hmMWxf
                - ZnR3X2Rl
                - YWRiZWVm
                - fQ==
                - fQ==
             - umožňuje Base64 dekódovat toto
                - tshark -nr shark2.pcapng -Y 'dns' | grep -v '8.8.8.8' | grep -v response | grep local | awk -e'{print $12}' | sed -e 's/\..*//' | base64 -d
                    - získali jsme příznak :-)
